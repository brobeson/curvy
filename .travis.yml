# vim: nospell

language: cpp
dist: xenial
#git:
#  quiet: true
#  submodules: false
#branches:
#  only:
#    - /.*/

matrix:
  include:
    - os: linux
      name: GCC 5
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
          packages:
            - cppcheck
            - g++-5
            - clang-format-8
            - clang-tidy-8
            - libboost-test-dev
            - valgrind
      env:
        - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5"
    - os: linux
      name: GCC 6
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
          packages:
            - cppcheck
            - g++-6
            - clang-format-8
            - clang-tidy-8
            - libboost-test-dev
            - valgrind
      env:
        - MATRIX_EVAL="CC=gcc-6 && CXX=g++-6"
    - os: linux
      name: GCC 7
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
          packages:
            - cppcheck
            - g++-7
            - clang-format-8
            - clang-tidy-8
            - libboost-test-dev
            - valgrind
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
    - os: linux
      name: GCC 8
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
          packages:
            - cppcheck
            - g++-8
            - clang-format-8
            - clang-tidy-8
            - libboost-test-dev
            - valgrind
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
    - os: linux
      name: Clang 7
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-7
            - llvm-toolchain-xenial-8
          packages:
            - cppcheck
            - clang-7
            - clang-format-8
            - clang-tidy-8
            - libboost-test-dev
            - valgrind
      env:
        - MATRIX_EVAL="CC=clang-7 && CXX=clang++-7"
    - os: linux
      name: Clang 8
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
          packages:
            - cppcheck
            - clang-8
            - clang-format-8
            - clang-tidy-8
            - libboost-test-dev
            - valgrind
      env:
        - MATRIX_EVAL="CC=clang-8 && CXX=clang++-8"

install:
  - eval "${MATRIX_EVAL}"
  - pip install --user ${USER} cmakelint lizard conan

  # set up a build directory, because in-source builds are not allowed
  - source_directory="${TRAVIS_BUILD_DIR}"
  - build_directory="${TRAVIS_BUILD_DIR}/../build"
  - mkdir "${build_directory}"

script:
  # Run Cppcheck manually. CMake ignores Cppcheck's exit status, so if an error
  # is reported, the build would still pass.
  - cd "${source_directory}"
  - cppcheck
    --quiet
    --enable=warning
    --enable=style
    --enable=information
    --error-exitcode=2
    -j $(nproc)
    .

  # release build & test
  - cd "${build_directory}"
    && conan install "${source_directory}"
    && cmake
      -D CMAKE_BUILD_TYPE=Release
      -D quality_checks:BOOL=on
      "${source_directory}"
    && cmake --build . -- -j$(nproc)
    && ctest --output-on-failure

  # fail if clang-format modified anything at the start of the release build
  #- cd "${source_directory}" && [[ -z $(git status --porcelain) ]]
  - cd "${source_directory}"
  - tools/validate_formatting.sh
  - cd "${build_directory}"

  # debug build & test with address sanitizer
  - rm -r *
    && conan install "${source_directory}"
    && cmake
      -D CMAKE_BUILD_TYPE=Debug
      -D quality_checks:BOOL=on
      -D dynamic_analysis:STRING=asan
      "${source_directory}"
    && cmake --build . -- -j$(nproc)
    && ctest --output-on-failure

  # debug build & test with Valgrind
  - rm -r *
    && conan install "${source_directory}"
    && cmake
      -D CMAKE_BUILD_TYPE=Debug
      -D quality_checks:BOOL=on
      -D dynamic_analysis:STRING=valgrind
      "${source_directory}"
    && cmake --build . -- -j$(nproc)
    && ctest --output-on-failure --dashboard ExperimentalMemCheck
  - find . -name 'MemoryChecker.*.log' -exec cat {} \;
